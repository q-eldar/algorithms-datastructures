#+STARTUP: overview
* Qucik Sorting
  - In-place
  - Complexity N log n
  - Not stable
** Partition
   The idea is, you take one arbitrary element from the array. Lets
   name it *pivot* element. Rearrance the array in such a way that all
   of the elements on left side less than, all of the elements on
   right side greater than pivot element(and that was our
   *invariant*). The implementation may remind you [[https://www.hackerrank.com/challenges/pairs/topics][two pointer
   technique]]. In this realization we will take first element as pivot
   element. You can try [[https://www.hackerrank.com/challenges/quicksort1/problem][this]] challenge before moving forward. This is
   in-place partition realization. Using an extra array mamkes
   partitioning easier(and stable), but is not worth the cost
   #+begin_src python :results output
def partition(arr, lo, hi):
    pivot = arr[lo]
    # repeat until i and j cross
    for i, j in zip(range(lo+1, hi, 1), range(hi, lo, -1)):
        while arr[i] < pivot:  # scan i from left to right
            i += 1
            if i == hi: break   # this is not redundant
        while arr[j] > pivot:   # scan j from right to left
            j -= 1
            if j == lo: break   # this is redundant
        if i >= j: break     # crossing point
        # exchange elements to maintain invariant
        arr[i], arr[j] = arr[j], arr[i]

    # Exhcnage pivot element to its position. For this point there is
    # only one element that is sorted, that is pivot element.
    arr[lo], arr[j] = arr[j], arr[lo]    
    return j                    # this is pivot element poistion
arr = [4, 5, 3, 7, 2, 5, 2]
print(partition(arr, 0, len(arr)-1))
print(arr)
   #+end_src

   #+RESULTS:
   : 3
   : [2, 2, 3, 4, 7, 5, 5]
** Quick sort
   Now as we done with partitioning the rest is four line of code.
   #+begin_src python :session :results output
def sort(arr, lo, hi):
    if hi <= lo: return
    pivot = partition(arr, lo, hi)
    sort(arr, lo, pivot-1)
    sort(arr, pivot+1, hi)

sort(arr, 0, len(arr)-1)
print(arr)
   #+end_src

   #+RESULTS:
   : [0, 2, 3, 4, 5, 6, 7, 8, 9]
** Optimize perofmance
   Finding partition point is crusial for quick sort algorithm. So
   we'll shuffle array for peroformance quarantee
   #+begin_src python :session :results output
from random import shuffle
shuffle(arr)
sort(arr, 0, len(arr)-1)
print(arr)
   #+end_src

   #+RESULTS:
   : [0, 2, 3, 4, 5, 6, 7, 8, 9]
